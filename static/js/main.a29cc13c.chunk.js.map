{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["tableHeaders","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","tableData","count","page","sourceData","_fetchData","map","oHeadline","sTitle","title","sDescription","description","sAuthor","author","sSource","source","name","uURL","url","rowData","react_default","a","createElement","Button","option","glyph","onClick","window","open","setState","_this2","iPageNumber","fetch","concat","NewsKey","key","then","response","json","oNews","totalResults","articles","aArticles","_buildTableRows","_this3","className","ActionBar","Table","headers","Pagination","itemsTotal","e","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wWAQMA,SAAe,CAAC,QAAS,cAAe,SAAU,SAAU,KA6EnDC,cA1Eb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,UAAa,GACbC,MAAS,EACTC,KAAQ,EACRC,WAAc,MAPCX,mFAYjBG,KAAKS,uDAIL,IAEMJ,EAFYL,KAAKI,MAAMI,WAEDE,IAAI,SAACC,GAC/B,IAAIC,EAASD,EAAUE,MACnBC,EAAeH,EAAUI,YACzBC,EAAUL,EAAUM,OACpBC,EAAUP,EAAUQ,OAAOC,KAC3BC,EAAOV,EAAUW,IAKrB,MAAO,CAACC,QADQ,CAACX,EAAQE,EAAcE,EAASE,EAFlCM,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,OAAO,aAAaC,MAAM,aAAaC,QAAS,kBAAMC,OAAOC,KAAKX,EAAM,YAAhF,YAMhBrB,KAAKiC,SAAS,CAAC5B,UAAaA,yCAGjB,IAAA6B,EAAAlC,KACLmC,EAAcnC,KAAKI,MAAMG,KAE/B6B,MAAK,0DAAAC,OAA2DC,EAAQC,IAAnE,sBAAAF,OAA2FF,IAC7FK,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACG,GAGL,OAFAT,EAAKD,SAAS,CAAC3B,MAASqC,EAAMC,eAEvBD,EAAME,WAGdL,KAAK,SAACM,GAAD,OAAeZ,EAAKD,SAAS,CAACzB,WAAcsC,MACjDN,KAAK,kBAAKN,EAAKa,qDAGX,IAAAC,EAAAhD,KACP,OACEwB,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,OACbzB,EAAAC,EAAAC,cAACwB,EAAA,UAAD,KACE1B,EAAAC,EAAAC,cAACwB,EAAA,gBAAD,CAAiBrC,MAAO,mBAAoBE,YAAa,kBACzDS,EAAAC,EAAAC,cAACwB,EAAA,iBAAD,KACE1B,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQE,MAAM,UAAUD,OAAO,QAAQE,QAAS,kBAAMkB,EAAKvC,eAA3D,aAIJe,EAAAC,EAAAC,cAACyB,EAAA,MAAD,CACIC,QAAS1D,EACTW,UAAWL,KAAKI,MAAMC,YAG1BmB,EAAAC,EAAAC,cAAC2B,EAAA,WAAD,CAAYC,WAAYtD,KAAKI,MAAME,MAAOwB,QAAS,SAACyB,GACjC,kBAANA,GACTP,EAAKf,SAAS,CAAC1B,KAAQgD,GAAI,kBAAMP,EAAKvC,0BAnEhC+C,aCEEC,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.a29cc13c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Table } from 'fundamental-react/lib/Table/Table';\nimport { Button } from 'fundamental-react/lib/Button/Button';\nimport { Pagination } from 'fundamental-react/lib/Pagination/Pagination';\nimport { ActionBar, ActionBarActions, ActionBarHeader } from 'fundamental-react/lib/ActionBar/ActionBar';\nimport NewsKey from './NewsKey.json';\nimport './App.css';\n\nconst tableHeaders = ['Title', 'Description', 'Author', 'Source', ''];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      \"tableData\": [],\n      \"count\": 1,\n      \"page\": 1,\n      \"sourceData\": null\n    };\n  }\n\n  componentDidMount() {\n    this._fetchData();\n  }\n\n  _buildTableRows() {\n    const aArticles = this.state.sourceData;\n\n    const tableData = aArticles.map((oHeadline) => {\n      let sTitle = oHeadline.title;\n      let sDescription = oHeadline.description;\n      let sAuthor = oHeadline.author;\n      let sSource = oHeadline.source.name;\n      let uURL = oHeadline.url;\n      \n      let cButton = <Button option=\"emphasized\" glyph=\"initiative\" onClick={() => window.open(uURL, \"_blank\")}>Read</Button>;\n\n      let aTableRow = [sTitle, sDescription, sAuthor, sSource, cButton];\n      return {\"rowData\": aTableRow};\n    });\n\n    this.setState({\"tableData\": tableData});\n  }\n\n  _fetchData() {\n    const iPageNumber = this.state.page;\n\n    fetch(`https://newsapi.org/v2/top-headlines?country=gb&apiKey=${NewsKey.key}&pageSize=10&page=${iPageNumber}`)\n      .then((response) => response.json())\n      .then((oNews) => {\n        this.setState({\"count\": oNews.totalResults});\n\n        return oNews.articles;\n      })\n      //.catch((oError) => console.error(\"woops\"))\n      .then((aArticles) => this.setState({\"sourceData\": aArticles}))\n      .then(()=> this._buildTableRows());\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ActionBar>\n          <ActionBarHeader title={\"Leon's Fiori App\"} description={\"React Edition\"} />\n          <ActionBarActions>\n            <Button glyph=\"refresh\" option=\"light\" onClick={() => this._fetchData()}>Refresh</Button>\n          </ActionBarActions>\n        </ActionBar>\n\n        <Table\n            headers={tableHeaders}\n            tableData={this.state.tableData}>\n        </Table>\n\n        <Pagination itemsTotal={this.state.count} onClick={(e) => {\n          if (typeof e === \"number\") {\n            this.setState({\"page\": e}, () => this._fetchData());\n          }\n        }}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}